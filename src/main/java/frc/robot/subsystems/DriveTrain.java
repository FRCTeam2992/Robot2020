// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.command.Subsystem;

public class DriveTrain extends Subsystem {

    // Drive Motors
    private CANSparkMax leftSparkDrive1;
    private CANSparkMax leftSparkDrive2;
    private CANSparkMax rightSparkDrive1;
    private CANSparkMax rightSparkDrive2;

    // Drive Shift Solenoid
    private Solenoid driveGearShift;

    public DriveTrain() {
        // Drive Motors
        leftSparkDrive1 = new CANSparkMax(1, MotorType.kBrushless);
        leftSparkDrive1.setInverted(false);

        leftSparkDrive2 = new CANSparkMax(2, MotorType.kBrushless);
        leftSparkDrive2.follow(leftSparkDrive1);

        rightSparkDrive1 = new CANSparkMax(3, MotorType.kBrushless);
        rightSparkDrive1.setInverted(false);

        rightSparkDrive2 = new CANSparkMax(4, MotorType.kBrushless);
        rightSparkDrive2.follow(rightSparkDrive1);

        // Drive Shift Solenoid
        driveGearShift = new Solenoid(0, 0);
    }

    @Override
    public void initDefaultCommand() {
        setDefaultCommand(new DriveSticks());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void tankDrive(double left, double right) {
        left = Math.max(-1, Math.min(1, left));
        right = Math.max(-1, Math.min(1, right));

        leftSparkDrive1.set(left);
        rightSparkDrive1.set(right);
    }

    public void arcadeDrive(double moveValue, double rotateValue) {
        double leftMotorSpeed = 0;
        double rightMotorSpeed = 0;

        if (moveValue < 0) {
            leftMotorSpeed = moveValue - rotateValue;
            rightMotorSpeed = moveValue + rotateValue;
        } else {
            leftMotorSpeed = moveValue + rotateValue;
            rightMotorSpeed = moveValue - rotateValue;
        }

        double max = Math.max(Math.abs(leftMotorSpeed), Math.abs(rightMotorSpeed));

        if (max > 1.0) {
            leftMotorSpeed /= max;
            rightMotorSpeed /= max;
        }

        tankDrive(leftMotorSpeed, rightMotorSpeed);
    }

    public void setDriveGear(boolean toggle) {
        driveGearShift.set(toggle);
    }
}
